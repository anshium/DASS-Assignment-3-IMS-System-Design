@startuml manageUsers
package ManageUsersModule {
    class User {
        + userID: int
        + name: string
        + bio: string

        + changeName(name: string): int
        + updateBio(bio: string): int
    }

    class AdminUser extends User {
        + adminID: int

        + updateUserDatabase()
    }
    class SearchSystem {
        + searchQuery: string
        + searchResults: List<User>

        + addSearchQuery(query: string): void
        + updateSearchQuery(query: string): void
        + viewProfileBasedOnRoles(roles: List<role>): void
        + search(): void
    }

    class UserManager {
        + roles: List<enum>
        + privileges: List<enum>
        
        + viewAllRoles(): void
        + viewAllPrivileges(): void
        + addNewRole(role: enum): void
        + removeRole(role: enum): void
        + updatePassword(user: User): void
        + addNewPrivilege(privilege: enum): void
        + removePrivileges(privilege: enum): void
        + editUser(userID: int): void
        + updateRole(userID: int, role: enum): void
        + updatePrivileges(userID: int, privilege: enum): void
        + setStandards(): void
    }

    class UserDatabase {
        + users: List<Users>

        + addUser(user: User)
        + removeUser(user_id: int)
        + viewUserDetails(user_id: int)
    }

    AdminUser "1..*" -- "1" UserDatabase: manages
    User "1..*" <-- "1" UserDatabase: uses details of
    AdminUser "1..*" --> "1" SearchSystem: searches using
    AdminUser "1..*" --> "1" UserManager: uses
    UserManager "1" --> "1" UserDatabase: accesses
    SearchSystem "1" --> "1" UserDatabase: uses
}
@enduml
